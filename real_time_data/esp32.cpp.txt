#include <WiFi.h>
#include <HTTPClient.h>
#include <NewPing.h>

// WiFi credentials
const char* ssid = "sriks05";       // Replace with your WiFi SSID
const char* password = "srik2005";  // Replace with your WiFi password

// Server URL
const char* serverURL = "http://192.168.115.40:5000/upload";  // Replace with your server URL

// Ultrasonic sensor pins
#define TRIG_PIN_1 23
#define ECHO_PIN_1 22
#define TRIG_PIN_2 21
#define ECHO_PIN_2 19
#define TRIG_PIN_3 18
#define ECHO_PIN_3 5
#define TRIG_PIN_4 17
#define ECHO_PIN_4 16

// Container dimensions (in cm)
const float containerHeight = 20.0;  // Height in cm

// Create NewPing objects for each sensor
NewPing sonar1(TRIG_PIN_1, ECHO_PIN_1, containerHeight);
NewPing sonar2(TRIG_PIN_2, ECHO_PIN_2, containerHeight);
NewPing sonar3(TRIG_PIN_3, ECHO_PIN_3, containerHeight);
NewPing sonar4(TRIG_PIN_4, ECHO_PIN_4, containerHeight);

// Create a WiFiClient object
WiFiClient wifiClient;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  
  // Wait for connection
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi!");
}

void loop() {
  // Get distance readings from each sensor
  float distance1 = sonar1.ping_cm();
  float distance2 = sonar2.ping_cm();
  float distance3 = sonar3.ping_cm();
  float distance4 = sonar4.ping_cm();
  
  // Calculate average distance
  float averageDistance = (distance1 + distance2 + distance3 + distance4) / 4.0;

  // Calculate percentage filled
  float garbageFilled = ((containerHeight - averageDistance) / containerHeight) * 100.0;

  // Print readings
  Serial.print("Garbage Fill Percentage: ");
  Serial.print(garbageFilled);
  Serial.println("%");

  // Check WiFi connection before sending data
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Begin HTTP request with WiFiClient and URL
    http.begin(wifiClient, serverURL);  // Specify the server URL
    http.addHeader("Content-Type", "application/x-www-form-urlencoded"); // Sending data as form-urlencoded

    // Set a timeout for the HTTP connection
    http.setTimeout(2000);  // 2 seconds timeout

    // Prepare data to send
    String postData = "garbage_fill=" + String(garbageFilled);

    // Send HTTP POST request
    int httpResponseCode = http.POST(postData);

    // Print detailed error messages
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Server Response: " + response);
    } else {
      Serial.print("Error in sending POST: ");
      Serial.println(httpResponseCode);
      
      // Print additional error info for debugging
      if (httpResponseCode == -1) {
        Serial.println("Possible reasons:");
        Serial.println("- Server is unreachable");
        Serial.println("- Wrong URL or port");
        Serial.println("- Firewall blocking the request");
      }
    }

    // End the HTTP request
    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }

  // Add a delay before the next reading
  delay(5000); // 5 seconds delay
}